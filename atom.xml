<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>拒绝再玩</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-20T06:10:23.812Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>duoyu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>k8s</title>
    <link href="http://yoursite.com/2020/03/20/kubernetes/pod%20%E7%8A%B6%E6%80%81/"/>
    <id>http://yoursite.com/2020/03/20/kubernetes/pod%20%E7%8A%B6%E6%80%81/</id>
    <published>2020-03-20T06:09:45.000Z</published>
    <updated>2020-03-20T06:10:23.812Z</updated>
    
    <content type="html"><![CDATA[<p>CrashLoopBackOff： 容器退出，kubelet正在将它重启</p><p>InvalidImageName： 无法解析镜像名称</p><p>ImageInspectError： 无法校验镜像</p><p>ErrImageNeverPull： 策略禁止拉取镜像</p><p>ImagePullBackOff： 正在重试拉取</p><p>RegistryUnavailable： 连接不到镜像中心</p><p>ErrImagePull： 通用的拉取镜像出错</p><p>CreateContainerConfigError： 不能创建kubelet使用的容器配置</p><p>CreateContainerError： 创建容器失败</p><p>m.internalLifecycle.PreStartContainer 执行hook报错</p><p>RunContainerError： 启动容器失败</p><p>PostStartHookError： 执行hook报错</p><p>ContainersNotInitialized： 容器没有初始化完毕</p><p>ContainersNotReady： 容器没有准备完毕</p><p>ContainerCreating：容器创建中</p><p>PodInitializing：pod 初始化中</p><p>DockerDaemonNotReady：docker还没有完全启动</p><p>NetworkPluginNotReady： 网络插件还没有完全启动</p><p>Evicted：即驱赶的意思，意思是当节点出现异常时，kubernetes将有相应的机制驱赶该节点上的Pod。 多见于资源不足时导致的驱赶。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CrashLoopBackOff： 容器退出，kubelet正在将它重启&lt;/p&gt;
&lt;p&gt;InvalidImageName： 无法解析镜像名称&lt;/p&gt;
&lt;p&gt;ImageInspectError： 无法校验镜像&lt;/p&gt;
&lt;p&gt;ErrImageNeverPull： 策略禁止拉取镜
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>k8s</title>
    <link href="http://yoursite.com/2020/03/20/kubernetes/kubectl%20%E5%91%BD%E4%BB%A4%E6%8A%80%E5%B7%A7%E5%A4%A7%E5%85%A8/kubectl%20%E5%91%BD%E4%BB%A4%E6%8A%80%E5%B7%A7%E5%A4%A7%E5%85%A8/"/>
    <id>http://yoursite.com/2020/03/20/kubernetes/kubectl%20%E5%91%BD%E4%BB%A4%E6%8A%80%E5%B7%A7%E5%A4%A7%E5%85%A8/kubectl%20%E5%91%BD%E4%BB%A4%E6%8A%80%E5%B7%A7%E5%A4%A7%E5%85%A8/</id>
    <published>2020-03-20T03:13:20.000Z</published>
    <updated>2020-03-20T06:18:20.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kubectl-命令技巧大全"><a href="#kubectl-命令技巧大全" class="headerlink" title="kubectl 命令技巧大全"></a><strong>kubectl 命令技巧大全</strong></h1><h2 id="Kubectl-自动补全"><a href="#Kubectl-自动补全" class="headerlink" title="Kubectl 自动补全"></a><strong>Kubectl 自动补全</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bash-completion</span><br><span class="line"></span><br><span class="line">source &#x2F;usr&#x2F;share&#x2F;bash-completion&#x2F;bash_completion</span><br><span class="line"></span><br><span class="line">source &lt;(kubectl completion bash)</span><br></pre></td></tr></table></figure><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a><strong>创建对象</strong></h2><p>Kubernetes 的清单文件可以使用 json 或 yaml 格式定义。可以以 .yaml、.yml、或者 .json 为扩展名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create -f .&#x2F;my-manifest.yaml           # 创建资源</span><br><span class="line"></span><br><span class="line">$ kubectl create -f .&#x2F;my1.yaml -f .&#x2F;my2.yaml     # 使用多个文件创建资源</span><br><span class="line"></span><br><span class="line">$ kubectl create -f .&#x2F;dir                        # 使用目录下的所有清单文件来创建资源</span><br><span class="line"></span><br><span class="line">$ kubectl create -f https:&#x2F;&#x2F;git.io&#x2F;vPieo         # 使用 url 来创建资源</span><br><span class="line"></span><br><span class="line">$ kubectl run nginx --image&#x3D;nginx                # 启动一个 nginx 实例</span><br><span class="line"></span><br><span class="line">$ kubectl explain pods,svc                       # 获取 pod 和 svc 的文档</span><br><span class="line"></span><br><span class="line">\# 从 stdin 输入中创建多个 YAML 对象</span><br><span class="line"></span><br><span class="line">$ cat &lt;&lt;EOF | kubectl create -f -</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line"></span><br><span class="line">kind: Pod</span><br><span class="line"></span><br><span class="line">metadata:</span><br><span class="line"></span><br><span class="line">  name: busybox-sleep</span><br><span class="line"></span><br><span class="line">spec:</span><br><span class="line"></span><br><span class="line">  containers:</span><br><span class="line"></span><br><span class="line">  \- name: busybox</span><br><span class="line"></span><br><span class="line">​    image: busybox</span><br><span class="line"></span><br><span class="line">​    args:</span><br><span class="line"></span><br><span class="line">​    \- sleep</span><br><span class="line"></span><br><span class="line">​    \- &quot;1000000&quot;</span><br><span class="line"></span><br><span class="line">\---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line"></span><br><span class="line">kind: Pod</span><br><span class="line"></span><br><span class="line">metadata:</span><br><span class="line"></span><br><span class="line">  name: busybox-sleep-less</span><br><span class="line"></span><br><span class="line">spec:</span><br><span class="line"></span><br><span class="line">  containers:</span><br><span class="line"></span><br><span class="line">  \- name: busybox</span><br><span class="line"></span><br><span class="line">​    image: busybox</span><br><span class="line"></span><br><span class="line">​    args:</span><br><span class="line"></span><br><span class="line">​    \- sleep</span><br><span class="line"></span><br><span class="line">​    \- &quot;1000&quot;</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">\# 创建包含几个 key 的 Secret</span><br><span class="line"></span><br><span class="line">$ cat &lt;&lt;EOF | kubectl create -f -</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line"></span><br><span class="line">kind: Secret</span><br><span class="line"></span><br><span class="line">metadata:</span><br><span class="line"></span><br><span class="line">  name: mysecret</span><br><span class="line"></span><br><span class="line">type: Opaque</span><br><span class="line"></span><br><span class="line">data:</span><br><span class="line"></span><br><span class="line">  password: $(echo &quot;s33msi4&quot; | base64)</span><br><span class="line"></span><br><span class="line">  username: $(echo &quot;jane&quot; | base64)</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="显示和查找资源"><a href="#显示和查找资源" class="headerlink" title="显示和查找资源"></a><strong>显示和查找资源</strong></h2><p> 列出所有 namespace 中的所有service </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get services</span><br></pre></td></tr></table></figure><p>列出所有 namespace 中的所有 pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods --all-namespaces</span><br></pre></td></tr></table></figure><p> 列出所有 pod 并显示详细信息 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -o wide</span><br></pre></td></tr></table></figure><p> 列出指定 deployment</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get deployment my-dep</span><br></pre></td></tr></table></figure><p> 列出该 namespace 中的所有 pod 包括未初始化的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods --include-uninitialized</span><br></pre></td></tr></table></figure><p>使用详细输出来描述命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> $ kubectl describe nodes my-node </span><br><span class="line"></span><br><span class="line">$ kubectl describe pods my-pod </span><br><span class="line"></span><br><span class="line">$ kubectl get services --sort-by&#x3D;.metadata.name</span><br></pre></td></tr></table></figure><p> 根据重启次数排序列出 pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods --sort-by&#x3D;&#39;.status.containerStatuses[0].restartCount&#39;</span><br></pre></td></tr></table></figure><p>获取所有具有 app=cassandra 的 pod 中的 version 标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods --selector&#x3D;app&#x3D;cassandra rc -o \  jsonpath&#x3D;&#39;&#123;.items[*].metadata.labels.version&#125;&#39;</span><br></pre></td></tr></table></figure><p> 获取所有节点的 ExternalIP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes -o jsonpath&#x3D;&#39;&#123;.items[*].status.addresses[?(@.type&#x3D;&#x3D;&quot;ExternalIP&quot;)].address&#125;&#39;</span><br></pre></td></tr></table></figure><p>列出属于某个 PC 的 Pod 的名字，“jq”命令用于转换复杂的 jsonpath，参考 <a href="https://stedolan.github.io/jq/" target="_blank" rel="noopener">https://stedolan.github.io/jq/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> $ sel&#x3D;$&#123;$(kubectl get rc my-rc --output&#x3D;json | jq -j &#39;.spec.selector | to_entries | .[] | &quot;\(.key)&#x3D;\(.value),&quot;&#39;)%?&#125; </span><br><span class="line"></span><br><span class="line">$ echo $(kubectl get pods --selector&#x3D;$sel --output&#x3D;jsonpath&#x3D;&#123;.items..metadata.name&#125;)</span><br></pre></td></tr></table></figure><p>查看哪些节点已就绪</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ JSONPATH&#x3D;&#39;&#123;range .items[*]&#125;&#123;@.metadata.name&#125;:&#123;range @.status.conditions[*]&#125;&#123;@.type&#125;&#x3D;&#123;@.status&#125;;&#123;end&#125;&#123;end&#125;&#39; \ &amp;&amp; kubectl get nodes -o jsonpath&#x3D;&quot;$JSONPATH&quot; | grep &quot;Ready&#x3D;True&quot;</span><br></pre></td></tr></table></figure><p> 列出当前 Pod 中使用的 Secret</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -o json | jq &#39;.items[].spec.containers[].env[]?.valueFrom.secretKeyRef.name&#39; | grep -v null | sort | uniq</span><br></pre></td></tr></table></figure><h2 id="更新资源"><a href="#更新资源" class="headerlink" title="更新资源"></a><strong>更新资源</strong></h2><p>滚动更新 pod frontend-v1 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl rolling-update frontend-v1 -f frontend-v2.json</span><br></pre></td></tr></table></figure><p>更新资源名称并更新镜像            </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl rolling-update frontend-v1 frontend-v2 --image&#x3D;image:v2</span><br></pre></td></tr></table></figure><p>更新 frontend pod 中的镜像 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl rolling-update frontend --image&#x3D;image:v2</span><br></pre></td></tr></table></figure><p>退出已存在的进行中的滚动更新                  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl rolling-update frontend-v1 frontend-v2 --rollback</span><br></pre></td></tr></table></figure><p>基于 stdin 输入的 JSON 替换 pod </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat pod.json | kubectl replace -f -</span><br></pre></td></tr></table></figure><p>强制替换，删除后重新创建资源。会导致服务中断。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl replace --force -f .&#x2F;pod.json</span><br></pre></td></tr></table></figure><p>为 nginx RC 创建服务，启用本地 80 端口连接到容器上的 8000 端口 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl expose rc nginx --port&#x3D;80 --target-port&#x3D;8000</span><br></pre></td></tr></table></figure><p>更新单容器 pod 的镜像版本（tag）到 v4 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod mypod -o yaml | sed &#39;s&#x2F;\(image: myimage\):.*$&#x2F;\1:v4&#x2F;&#39; | kubectl replace -f -</span><br></pre></td></tr></table></figure><p>添加标签 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl label pods my-pod new-label&#x3D;awesome</span><br></pre></td></tr></table></figure><p>添加注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl annotate pods my-pod icon-url&#x3D;http:&#x2F;&#x2F;goo.gl&#x2F;XXBTWq</span><br></pre></td></tr></table></figure><p>自动扩展 deployment “foo”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl autoscale deployment foo --min&#x3D;2 --max&#x3D;10</span><br></pre></td></tr></table></figure><h2 id="删除资源"><a href="#删除资源" class="headerlink" title="删除资源"></a><strong>删除资源</strong></h2><p># 删除 pod.json 文件中定义的类型和名称的 pod </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl delete -f .&#x2F;pod.json</span><br></pre></td></tr></table></figure><p>删除名为“baz”的 pod 和名为“foo”的 service </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl delete pod,service baz foo</span><br></pre></td></tr></table></figure><p>删除具有 name=myLabel 标签的 pod 和 serivce </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl delete pods,services -l name&#x3D;myLabel</span><br></pre></td></tr></table></figure><p>删除具有 name=myLabel 标签的 pod 和 service，包括尚未初始化的 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl delete pods,services -l name&#x3D;myLabel --include-uninitialized</span><br></pre></td></tr></table></figure><p>删除 my-ns namespace 下的所有 pod 和 serivce，包括尚未初始化的  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n my-ns delete po,svc --all</span><br></pre></td></tr></table></figure><h2 id="与运行中的Pod交互"><a href="#与运行中的Pod交互" class="headerlink" title="与运行中的Pod交互"></a><strong>与运行中的Pod交互</strong></h2><p># dump 输出 pod 的日志（stdout） </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl logs my-pod</span><br></pre></td></tr></table></figure><p>dump 输出 pod 中容器的日志（stdout，pod 中有多个容器的情况下使用） </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl logs my-pod -c my-container</span><br></pre></td></tr></table></figure><p>流式输出 pod 的日志（stdout） </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl logs -f my-pod</span><br></pre></td></tr></table></figure><p>流式输出 pod 中容器的日志（stdout，pod 中有多个容器的情况下使用） </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl logs -f my-pod -c my-container</span><br></pre></td></tr></table></figure><p>交互式 shell 的方式运行 pod </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl run -i --tty busybox --image&#x3D;busybox -- sh</span><br></pre></td></tr></table></figure><p>连接到运行中的容器   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl attach my-pod -i</span><br></pre></td></tr></table></figure><p>转发 pod 中的 6000 端口到本地的 5000 端口 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl port-forward my-pod 5000:6000</span><br></pre></td></tr></table></figure><p>在已存在的容器中执行命令（只有一个容器的情况下） </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl exec my-pod -- ls &#x2F;</span><br></pre></td></tr></table></figure><p>在已存在的容器中执行命令（pod 中有多个容器的情况下） </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl exec my-pod -c my-container -- ls &#x2F;</span><br></pre></td></tr></table></figure><p>显示指定 pod 和容器的指标度量    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl top pod POD_NAME --containers</span><br></pre></td></tr></table></figure><h2 id="与节点和集群交互"><a href="#与节点和集群交互" class="headerlink" title="与节点和集群交互"></a><strong>与节点和集群交互</strong></h2><p># 标记 my-node 不可调度 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl cordon my-node</span><br></pre></td></tr></table></figure><p>清空 my-node 以待维护 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl drain my-node</span><br></pre></td></tr></table></figure><p>标记 my-node 可调度 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl uncordon my-node</span><br></pre></td></tr></table></figure><p>显示 my-node 的指标度量 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl top node my-node</span><br></pre></td></tr></table></figure><p>显示 master 和服务的地址 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl cluster-info</span><br></pre></td></tr></table></figure><p>将当前集群状态输出到 stdout </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl cluster-info dump</span><br></pre></td></tr></table></figure><p>将当前集群状态输出到 /path/to/cluster-state </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl cluster-info dump --output-directory&#x3D;&#x2F;path&#x2F;to&#x2F;cluster-state</span><br></pre></td></tr></table></figure><p>如果该键和影响的污点（taint）已存在，则使用指定的值替换 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl taint nodes foo dedicated&#x3D;special-user:NoSchedule</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>资源类型</strong></th><th><strong>缩写别名</strong></th></tr></thead><tbody><tr><td>clusters</td><td></td></tr><tr><td>componentstatuses</td><td>cs</td></tr><tr><td>configmaps</td><td>cm</td></tr><tr><td>daemonsets</td><td>ds</td></tr><tr><td>deployments</td><td>deploy</td></tr><tr><td>endpoints</td><td>ep</td></tr><tr><td>event</td><td>ev</td></tr><tr><td>horizontalpodautoscalers</td><td>hpa</td></tr><tr><td>ingresses</td><td>ing</td></tr><tr><td>jobs</td><td></td></tr><tr><td>limitranges</td><td>limits</td></tr><tr><td>namespaces</td><td>ns</td></tr><tr><td>networkpolicies</td><td></td></tr><tr><td>nodes</td><td>no</td></tr><tr><td>statefulsets</td><td></td></tr><tr><td>persistentvolumeclaims</td><td>pvc</td></tr><tr><td>persistentvolumes</td><td>pv</td></tr><tr><td>pods</td><td>po</td></tr><tr><td>podsecuritypolicies</td><td>psp</td></tr><tr><td>podtemplates</td><td></td></tr><tr><td>replicasets</td><td>rs</td></tr><tr><td>replicationcontrollers</td><td>rc</td></tr><tr><td>resourcequotas</td><td>quota</td></tr><tr><td>cronjob</td><td></td></tr><tr><td>secrets</td><td></td></tr><tr><td>serviceaccount</td><td>sa</td></tr><tr><td>services</td><td>svc</td></tr><tr><td>storageclasses</td><td></td></tr></tbody></table><h2 id="kubectl-get-显示资源列表"><a href="#kubectl-get-显示资源列表" class="headerlink" title="kubectl get - 显示资源列表"></a>kubectl get - 显示资源列表</h2><p>#获取类型为Deployment的资源列表 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployments</span><br></pre></td></tr></table></figure><p>#获取类型为Pod的资源列表 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><p>#获取类型为Node的资源列表 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><h2 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h2><p>在命令后增加 -A 或 –all-namespaces 可查看所有名称空间中的对象，使用参数 -n 可查看指定名称空间的对象，例如</p><p># 查看所有名称空间的 Deployment </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployments -A </span><br><span class="line">kubectl get deployments --all-namespaces</span><br></pre></td></tr></table></figure><p>查看 kube-system 名称空间的 Deployment </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployments -n kube-system</span><br></pre></td></tr></table></figure><p>检查 kubectl 是否知道集群地址及凭证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl config view</span><br></pre></td></tr></table></figure><p>通过 kubectl cluster-info 命令获得这些服务列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ebs ~]# kubectl cluster-info </span><br><span class="line"></span><br><span class="line">Kubernetes master is running at https:&#x2F;&#x2F;172.16.121.88:6443 KubeDNS is running at https:&#x2F;&#x2F;172.16.121.88:6443&#x2F;api&#x2F;v1&#x2F;namespaces&#x2F;kube-system&#x2F;services&#x2F;kube-dns:dns&#x2F;proxy </span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use &#39;kubectl cluster-info dump&#39;.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;kubectl-命令技巧大全&quot;&gt;&lt;a href=&quot;#kubectl-命令技巧大全&quot; class=&quot;headerlink&quot; title=&quot;kubectl 命令技巧大全&quot;&gt;&lt;/a&gt;&lt;strong&gt;kubectl 命令技巧大全&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://yoursite.com/categories/kubernetes/"/>
    
    
  </entry>
  
  <entry>
    <title>kubernetes</title>
    <link href="http://yoursite.com/2020/03/20/kubernetes/"/>
    <id>http://yoursite.com/2020/03/20/kubernetes/</id>
    <published>2020-03-20T03:10:27.000Z</published>
    <updated>2020-03-20T03:10:27.097Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>web</title>
    <link href="http://yoursite.com/2020/03/19/web/"/>
    <id>http://yoursite.com/2020/03/19/web/</id>
    <published>2020-03-19T09:18:36.000Z</published>
    <updated>2020-03-20T05:43:26.971Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>web</title>
    <link href="http://yoursite.com/2020/03/19/web/web/"/>
    <id>http://yoursite.com/2020/03/19/web/web/</id>
    <published>2020-03-19T09:18:36.000Z</published>
    <updated>2020-03-20T03:49:39.975Z</updated>
    
    <content type="html"><![CDATA[<p>_config.yml配置git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">  type: &#39;git&#39;  </span><br><span class="line">  repo: git@github.com:liudelongqwer&#x2F;mengmo.github.io.git  </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>上传github，推送文件步骤：</p><p>hexo clean      hexo c   清除缓存文件 (db.json) 和已生成的静态文件 (public) hexo generate   hexo g   生成静态文件 hexo deploy     hexo d   部署网站 </p><p>执行端口启动：</p><p>hexo s -i 0.0.0.0 -p 8080 </p><p>绑定个人域名：</p><p>解析域名重点：博客网址中必须使用你github的用户名</p><p><strong>布局（Layout）</strong></p><p>Hexo 有三种默认布局：post、page 和 draft。在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td>post</td><td>source/_posts</td></tr><tr><td>page</td><td>source</td></tr><tr><td>draft</td><td>source/_drafts</td></tr></tbody></table><p><strong>hexo init</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init [ folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><p><strong>hexo new</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><p>hexo new “post title with whitespace” </p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-p, –path</td><td>自定义新文章的路径</td></tr><tr><td>-r, –replace</td><td>如果存在同名文章，将其替换</td></tr><tr><td>-s, –slug</td><td>文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。你可以使用 –path 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about&#x2F;me &quot;About me&quot;</span><br></pre></td></tr></table></figure><p>以上命令会创建一个 source/about/me.md 文件，同时 Front Matter 中的 title 为 “About me”</p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about&#x2F;me</span><br></pre></td></tr></table></figure><p>此时 Hexo 会创建 source/_posts/about/me.md，同时 me.md 的 Front Matter 中的 title 为 “page”。这是因为在上述命令中，hexo-cli 将 page 视为指定文章的标题、并采用默认的 layout。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;_config.yml配置git&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
