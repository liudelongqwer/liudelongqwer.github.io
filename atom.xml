<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>拒绝再玩</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-25T06:21:04.946Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>duoyu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>查看Pods/Nodes</title>
    <link href="http://yoursite.com/2020/03/25/%E6%9F%A5%E7%9C%8BPods-Nodes/"/>
    <id>http://yoursite.com/2020/03/25/%E6%9F%A5%E7%9C%8BPods-Nodes/</id>
    <published>2020-03-25T06:05:21.000Z</published>
    <updated>2020-03-25T06:21:04.946Z</updated>
    
    <content type="html"><![CDATA[<p>了解 Pod 和 Node</p> <a id="more"></a> <h2 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h2><p>​    Pod中的容器共享 IP 地址和端口空间（同一 Pod 中的不同 container 端口不能相互冲突），始终位于同一位置并共同调度，并在同一节点上的共享上下文中运行。（同一个Pod内的容器可以localhost + 端口互相访问）。 </p><p>​    当在 k8s 上创建 Deployment 时，会在集群上创建包含容器的 Pod (而不是直接创建容器)。每个Pod都与运行它的 worker 节点（Node）绑定，并保持在那里直到终止或被删除。如果节点（Node）发生故障，则会在群集中的其他可用节点（Node）上运行相同的 Pod（从同样的镜像创建 Container，使用同样的配置，IP 地址不同，Pod 名字不同）。 </p><ul><li>Pod（容器组）是 k8s 集群上的最基本的单元。</li><li>Pod 是一组容器（可包含一个或多个应用程序容器），以及共享存储（卷 Volumes）、IP 地址和有关如何运行容器的信息。 </li><li>如果多个容器紧密耦合并且需要共享磁盘等资源，则应该被部署在同一个Pod（容器组）中 </li></ul><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p> <img src="https://kuboard.cn/assets/img/module_03_nodes.38f0ef71.svg" alt="Kubernetes教程：Node概念"> </p><ol><li>Pod（容器组）总是在 <strong>Node（节点）</strong> 上运行。</li><li>Node（节点）是 kubernetes 集群中的计算机，可以是虚拟机或物理机。</li><li>每个 Node（节点）都由 master 管理。</li><li>一个 Node（节点）可以有多个Pod（容器组），kubernetes master 会根据每个 Node（节点）上可用资源的情况，自动调度 Pod（容器组）到最佳的 Node（节点）上。</li></ol><h6 id="每个Node（节点）至少运行："><a href="#每个Node（节点）至少运行：" class="headerlink" title="每个Node（节点）至少运行："></a>每个Node（节点）至少运行：</h6><ul><li>Kubelet，负责 master 节点和 worker 节点之间通信的进程；管理 Pod（容器组）和 Pod（容器组）内运行的 Container（容器）。</li><li>容器运行环境（如Docker）负责下载镜像、创建和运行容器等。</li></ul><h2 id="相关命令操作"><a href="#相关命令操作" class="headerlink" title="相关命令操作"></a>相关命令操作</h2><h6 id="kubectl-get-显示资源列表"><a href="#kubectl-get-显示资源列表" class="headerlink" title="kubectl get - 显示资源列表"></a><strong>kubectl get</strong> - 显示资源列表</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl get 资源类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取类型为Deployment的资源列表</span></span><br><span class="line">kubectl get deployments</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取类型为Pod的资源列表</span></span><br><span class="line">kubectl get pods</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取类型为Node的资源列表</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有名称空间的 Deployment</span></span><br><span class="line">kubectl get deployments -A</span><br><span class="line">kubectl get deployments --all-namespaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 kube-system 名称空间的 Deployment</span></span><br><span class="line">kubectl get deployments -n kube-system</span><br></pre></td></tr></table></figure><h6 id="kubectl-describe-显示有关资源的详细信息"><a href="#kubectl-describe-显示有关资源的详细信息" class="headerlink" title="kubectl describe - 显示有关资源的详细信息"></a><strong>kubectl describe</strong> - 显示有关资源的详细信息</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl describe 资源类型 资源名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看名称为nginx-XXXXXX的Pod的信息</span></span><br><span class="line">kubectl describe pod nginx-XXXXXX</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看名称为nginx的Deployment的信息</span></span><br><span class="line">kubectl describe deployment nginx</span><br></pre></td></tr></table></figure><h6 id="kubectl-logs-查看pod中的容器的打印日志（和命令docker-logs-类似）"><a href="#kubectl-logs-查看pod中的容器的打印日志（和命令docker-logs-类似）" class="headerlink" title="kubectl logs - 查看pod中的容器的打印日志（和命令docker logs 类似）"></a><strong>kubectl logs</strong> - 查看pod中的容器的打印日志（和命令docker logs 类似）</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl logs Pod名称</span></span><br><span class="line">kubectl logs -f nginx-pod-XXXXXXX</span><br></pre></td></tr></table></figure><h6 id="kubectl-exec-在pod中的容器环境内执行命令-和命令docker-exec-类似"><a href="#kubectl-exec-在pod中的容器环境内执行命令-和命令docker-exec-类似" class="headerlink" title="kubectl exec - 在pod中的容器环境内执行命令(和命令docker exec 类似)"></a><strong>kubectl exec</strong> - 在pod中的容器环境内执行命令(和命令docker exec 类似)</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl exec Pod名称 操作命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在名称为nginx-pod-xxxxxx的Pod中运行bash</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it nginx-pod-xxxxxx /bin/bash</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;了解 Pod 和 Node&lt;/p&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://yoursite.com/categories/kubernetes/"/>
    
    
  </entry>
  
  <entry>
    <title>k8s部署一个应用程序</title>
    <link href="http://yoursite.com/2020/03/25/k8s%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2020/03/25/k8s%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</id>
    <published>2020-03-25T05:49:00.000Z</published>
    <updated>2020-03-25T05:59:21.447Z</updated>
    
    <content type="html"><![CDATA[<p> 使用 kubectl 在 k8s 上部署第一个应用程序。 </p> <a id="more"></a> <h2 id="Deployment概念"><a href="#Deployment概念" class="headerlink" title="Deployment概念"></a>Deployment概念</h2><p>​    通过发布 Deployment，可以创建应用程序 (docker image) 的实例 (docker container)，这个实例会被包含在称为 <strong>Pod</strong> 的概念中，<strong>Pod</strong> 是 k8s 中最小可管理单元。</p><p>​    在 k8s 集群中发布 Deployment 后，Deployment 将指示 k8s 如何创建和更新应用程序的实例，master 节点将应用程序实例调度到集群中的具体的节点上。</p><p>​    创建应用程序实例后，Kubernetes Deployment Controller 会持续监控这些实例。如果运行实例的 worker 节点关机或被删除，则 Kubernetes Deployment Controller 将在群集中资源最优的另一个 worker 节点上重新创建一个新的实例。<strong>这提供了一种自我修复机制来解决机器故障或维护问题。</strong></p><p>​    通过创建应用程序实例并确保它们在集群节点中的运行实例个数，Kubernetes Deployment 提供了一种完全不同的方式来管理应用程序。</p><p> <img src="https://kuboard.cn/assets/img/module_02_first_app.25e902c4.svg" alt="Kubernetes教程：部署第一个应用程序"> </p><p> Deployment 处于 master 节点上，通过发布 Deployment，master 节点会选择合适的 worker 节点创建 Container（即图中的正方体），Container 会被包含在 Pod （即蓝色圆圈）里。 </p><h2 id="部署-nginx-Deployment"><a href="#部署-nginx-Deployment" class="headerlink" title="部署 nginx Deployment"></a>部署 nginx Deployment</h2><h6 id="创建文件-nginx-deployment-yaml"><a href="#创建文件-nginx-deployment-yaml" class="headerlink" title="创建文件 nginx-deployment.yaml"></a>创建文件 nginx-deployment.yaml</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span><span class="comment">#与k8s集群版本有关，使用 kubectl api-versions 即可查看当前集群支持的版本</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span><span class="comment">#该配置的类型，我们使用的是 Deployment</span></span><br><span class="line"><span class="attr">metadata:</span>        <span class="comment">#译名为元数据，即 Deployment 的一些基本属性和信息</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span><span class="comment">#Deployment 的名称</span></span><br><span class="line">  <span class="attr">labels:</span>    <span class="comment">#标签，可以灵活定位一个或多个资源，其中key和value均可自定义，可以定义多组，目前不需要理解</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span><span class="comment">#为该Deployment设置key为app，value为nginx的标签</span></span><br><span class="line"><span class="attr">spec:</span>        <span class="comment">#这是关于该Deployment的描述，可以理解为你期待该Deployment在k8s中如何使用</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span><span class="comment">#使用该Deployment创建一个应用程序实例</span></span><br><span class="line">  <span class="attr">selector:</span>    <span class="comment">#标签选择器，与上面的标签共同作用，目前不需要理解</span></span><br><span class="line">    <span class="attr">matchLabels:</span> <span class="comment">#选择包含标签app:nginx的资源</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span>    <span class="comment">#这是选择或创建的Pod的模板</span></span><br><span class="line">    <span class="attr">metadata:</span><span class="comment">#Pod的元数据</span></span><br><span class="line">      <span class="attr">labels:</span><span class="comment">#Pod的标签，上面的selector即选择包含标签app:nginx的Pod</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span>    <span class="comment">#期望Pod实现的功能（即在pod中部署）</span></span><br><span class="line">      <span class="attr">containers:</span><span class="comment">#生成container，与docker中的container是同一种</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span><span class="comment">#container的名称</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.7.9</span><span class="comment">#使用镜像nginx:1.7.9创建container，该container默认80端口可访问</span></span><br></pre></td></tr></table></figure><h6 id="应用-YAML-文件"><a href="#应用-YAML-文件" class="headerlink" title="应用 YAML 文件"></a><strong>应用 YAML 文件</strong></h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f nginx-deployment.yaml</span><br></pre></td></tr></table></figure><h6 id="查看部署结果"><a href="#查看部署结果" class="headerlink" title="查看部署结果"></a><strong>查看部署结果</strong></h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 Deployment</span></span><br><span class="line">kubectl get deployments</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Pod</span></span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 使用 kubectl 在 k8s 上部署第一个应用程序。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://yoursite.com/categories/kubernetes/"/>
    
    
  </entry>
  
  <entry>
    <title>kubectl 命令技巧大全</title>
    <link href="http://yoursite.com/2020/03/20/kubectl%20%E5%91%BD%E4%BB%A4%E6%8A%80%E5%B7%A7%E5%A4%A7%E5%85%A8/"/>
    <id>http://yoursite.com/2020/03/20/kubectl%20%E5%91%BD%E4%BB%A4%E6%8A%80%E5%B7%A7%E5%A4%A7%E5%85%A8/</id>
    <published>2020-03-20T03:13:20.000Z</published>
    <updated>2020-03-20T07:20:09.424Z</updated>
    
    <content type="html"><![CDATA[<p>一些基本的kubernets操作命令</p> <a id="more"></a> <h1 id="kubectl-命令技巧大全"><a href="#kubectl-命令技巧大全" class="headerlink" title="kubectl 命令技巧大全"></a><strong>kubectl 命令技巧大全</strong></h1><h2 id="Kubectl-自动补全"><a href="#Kubectl-自动补全" class="headerlink" title="Kubectl 自动补全"></a><strong>Kubectl 自动补全</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bash-completion</span><br><span class="line"></span><br><span class="line">source &#x2F;usr&#x2F;share&#x2F;bash-completion&#x2F;bash_completion</span><br><span class="line"></span><br><span class="line">source &lt;(kubectl completion bash)</span><br></pre></td></tr></table></figure><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a><strong>创建对象</strong></h2><p>Kubernetes 的清单文件可以使用 json 或 yaml 格式定义。可以以 .yaml、.yml、或者 .json 为扩展名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create -f .&#x2F;my-manifest.yaml           # 创建资源</span><br><span class="line"></span><br><span class="line">$ kubectl create -f .&#x2F;my1.yaml -f .&#x2F;my2.yaml     # 使用多个文件创建资源</span><br><span class="line"></span><br><span class="line">$ kubectl create -f .&#x2F;dir                        # 使用目录下的所有清单文件来创建资源</span><br><span class="line"></span><br><span class="line">$ kubectl create -f https:&#x2F;&#x2F;git.io&#x2F;vPieo         # 使用 url 来创建资源</span><br><span class="line"></span><br><span class="line">$ kubectl run nginx --image&#x3D;nginx                # 启动一个 nginx 实例</span><br><span class="line"></span><br><span class="line">$ kubectl explain pods,svc                       # 获取 pod 和 svc 的文档</span><br></pre></td></tr></table></figure><h2 id="显示和查找资源"><a href="#显示和查找资源" class="headerlink" title="显示和查找资源"></a><strong>显示和查找资源</strong></h2><p> 列出所有 namespace 中的所有service </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get services</span><br></pre></td></tr></table></figure><p>列出所有 namespace 中的所有 pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods --all-namespaces</span><br></pre></td></tr></table></figure><p> 列出所有 pod 并显示详细信息 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -o wide</span><br></pre></td></tr></table></figure><p> 列出指定 deployment</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get deployment my-dep</span><br></pre></td></tr></table></figure><p> 列出该 namespace 中的所有 pod 包括未初始化的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods --include-uninitialized</span><br></pre></td></tr></table></figure><p>使用详细输出来描述命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> $ kubectl describe nodes my-node </span><br><span class="line"></span><br><span class="line">$ kubectl describe pods my-pod </span><br><span class="line"></span><br><span class="line">$ kubectl get services --sort-by&#x3D;.metadata.name</span><br></pre></td></tr></table></figure><p> 根据重启次数排序列出 pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods --sort-by&#x3D;&#39;.status.containerStatuses[0].restartCount&#39;</span><br></pre></td></tr></table></figure><p>获取所有具有 app=cassandra 的 pod 中的 version 标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods --selector&#x3D;app&#x3D;cassandra rc -o \  jsonpath&#x3D;&#39;&#123;.items[*].metadata.labels.version&#125;&#39;</span><br></pre></td></tr></table></figure><p> 获取所有节点的 ExternalIP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes -o jsonpath&#x3D;&#39;&#123;.items[*].status.addresses[?(@.type&#x3D;&#x3D;&quot;ExternalIP&quot;)].address&#125;&#39;</span><br></pre></td></tr></table></figure><p>列出属于某个 PC 的 Pod 的名字，“jq”命令用于转换复杂的 jsonpath，参考 <a href="https://stedolan.github.io/jq/" target="_blank" rel="noopener">https://stedolan.github.io/jq/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> $ sel&#x3D;$&#123;$(kubectl get rc my-rc --output&#x3D;json | jq -j &#39;.spec.selector | to_entries | .[] | &quot;\(.key)&#x3D;\(.value),&quot;&#39;)%?&#125; </span><br><span class="line"></span><br><span class="line">$ echo $(kubectl get pods --selector&#x3D;$sel --output&#x3D;jsonpath&#x3D;&#123;.items..metadata.name&#125;)</span><br></pre></td></tr></table></figure><p>查看哪些节点已就绪</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ JSONPATH&#x3D;&#39;&#123;range .items[*]&#125;&#123;@.metadata.name&#125;:&#123;range @.status.conditions[*]&#125;&#123;@.type&#125;&#x3D;&#123;@.status&#125;;&#123;end&#125;&#123;end&#125;&#39; \ &amp;&amp; kubectl get nodes -o jsonpath&#x3D;&quot;$JSONPATH&quot; | grep &quot;Ready&#x3D;True&quot;</span><br></pre></td></tr></table></figure><p> 列出当前 Pod 中使用的 Secret</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -o json | jq &#39;.items[].spec.containers[].env[]?.valueFrom.secretKeyRef.name&#39; | grep -v null | sort | uniq</span><br></pre></td></tr></table></figure><h2 id="更新资源"><a href="#更新资源" class="headerlink" title="更新资源"></a><strong>更新资源</strong></h2><p>滚动更新 pod frontend-v1 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl rolling-update frontend-v1 -f frontend-v2.json</span><br></pre></td></tr></table></figure><p>更新资源名称并更新镜像            </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl rolling-update frontend-v1 frontend-v2 --image&#x3D;image:v2</span><br></pre></td></tr></table></figure><p>更新 frontend pod 中的镜像 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl rolling-update frontend --image&#x3D;image:v2</span><br></pre></td></tr></table></figure><p>退出已存在的进行中的滚动更新                  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl rolling-update frontend-v1 frontend-v2 --rollback</span><br></pre></td></tr></table></figure><p>基于 stdin 输入的 JSON 替换 pod </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat pod.json | kubectl replace -f -</span><br></pre></td></tr></table></figure><p>强制替换，删除后重新创建资源。会导致服务中断。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl replace --force -f .&#x2F;pod.json</span><br></pre></td></tr></table></figure><p>为 nginx RC 创建服务，启用本地 80 端口连接到容器上的 8000 端口 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl expose rc nginx --port&#x3D;80 --target-port&#x3D;8000</span><br></pre></td></tr></table></figure><p>更新单容器 pod 的镜像版本（tag）到 v4 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod mypod -o yaml | sed &#39;s&#x2F;\(image: myimage\):.*$&#x2F;\1:v4&#x2F;&#39; | kubectl replace -f -</span><br></pre></td></tr></table></figure><p>添加标签 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl label pods my-pod new-label&#x3D;awesome</span><br></pre></td></tr></table></figure><p>添加注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl annotate pods my-pod icon-url&#x3D;http:&#x2F;&#x2F;goo.gl&#x2F;XXBTWq</span><br></pre></td></tr></table></figure><p>自动扩展 deployment “foo”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl autoscale deployment foo --min&#x3D;2 --max&#x3D;10</span><br></pre></td></tr></table></figure><h2 id="删除资源"><a href="#删除资源" class="headerlink" title="删除资源"></a><strong>删除资源</strong></h2><p># 删除 pod.json 文件中定义的类型和名称的 pod </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl delete -f .&#x2F;pod.json</span><br></pre></td></tr></table></figure><p>删除名为“baz”的 pod 和名为“foo”的 service </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl delete pod,service baz foo</span><br></pre></td></tr></table></figure><p>删除具有 name=myLabel 标签的 pod 和 serivce </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl delete pods,services -l name&#x3D;myLabel</span><br></pre></td></tr></table></figure><p>删除具有 name=myLabel 标签的 pod 和 service，包括尚未初始化的 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl delete pods,services -l name&#x3D;myLabel --include-uninitialized</span><br></pre></td></tr></table></figure><p>删除 my-ns namespace 下的所有 pod 和 serivce，包括尚未初始化的  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n my-ns delete po,svc --all</span><br></pre></td></tr></table></figure><h2 id="与运行中的Pod交互"><a href="#与运行中的Pod交互" class="headerlink" title="与运行中的Pod交互"></a><strong>与运行中的Pod交互</strong></h2><p># dump 输出 pod 的日志（stdout） </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl logs my-pod</span><br></pre></td></tr></table></figure><p>dump 输出 pod 中容器的日志（stdout，pod 中有多个容器的情况下使用） </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl logs my-pod -c my-container</span><br></pre></td></tr></table></figure><p>流式输出 pod 的日志（stdout） </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl logs -f my-pod</span><br></pre></td></tr></table></figure><p>流式输出 pod 中容器的日志（stdout，pod 中有多个容器的情况下使用） </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl logs -f my-pod -c my-container</span><br></pre></td></tr></table></figure><p>交互式 shell 的方式运行 pod </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl run -i --tty busybox --image&#x3D;busybox -- sh</span><br></pre></td></tr></table></figure><p>连接到运行中的容器   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl attach my-pod -i</span><br></pre></td></tr></table></figure><p>转发 pod 中的 6000 端口到本地的 5000 端口 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl port-forward my-pod 5000:6000</span><br></pre></td></tr></table></figure><p>在已存在的容器中执行命令（只有一个容器的情况下） </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl exec my-pod -- ls &#x2F;</span><br></pre></td></tr></table></figure><p>在已存在的容器中执行命令（pod 中有多个容器的情况下） </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl exec my-pod -c my-container -- ls &#x2F;</span><br></pre></td></tr></table></figure><p>显示指定 pod 和容器的指标度量    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl top pod POD_NAME --containers</span><br></pre></td></tr></table></figure><h2 id="与节点和集群交互"><a href="#与节点和集群交互" class="headerlink" title="与节点和集群交互"></a><strong>与节点和集群交互</strong></h2><p># 标记 my-node 不可调度 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl cordon my-node</span><br></pre></td></tr></table></figure><p>清空 my-node 以待维护 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl drain my-node</span><br></pre></td></tr></table></figure><p>标记 my-node 可调度 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl uncordon my-node</span><br></pre></td></tr></table></figure><p>显示 my-node 的指标度量 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl top node my-node</span><br></pre></td></tr></table></figure><p>显示 master 和服务的地址 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl cluster-info</span><br></pre></td></tr></table></figure><p>将当前集群状态输出到 stdout </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl cluster-info dump</span><br></pre></td></tr></table></figure><p>将当前集群状态输出到 /path/to/cluster-state </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl cluster-info dump --output-directory&#x3D;&#x2F;path&#x2F;to&#x2F;cluster-state</span><br></pre></td></tr></table></figure><p>如果该键和影响的污点（taint）已存在，则使用指定的值替换 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl taint nodes foo dedicated&#x3D;special-user:NoSchedule</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>资源类型</strong></th><th><strong>缩写别名</strong></th></tr></thead><tbody><tr><td>clusters</td><td></td></tr><tr><td>componentstatuses</td><td>cs</td></tr><tr><td>configmaps</td><td>cm</td></tr><tr><td>daemonsets</td><td>ds</td></tr><tr><td>deployments</td><td>deploy</td></tr><tr><td>endpoints</td><td>ep</td></tr><tr><td>event</td><td>ev</td></tr><tr><td>horizontalpodautoscalers</td><td>hpa</td></tr><tr><td>ingresses</td><td>ing</td></tr><tr><td>jobs</td><td></td></tr><tr><td>limitranges</td><td>limits</td></tr><tr><td>namespaces</td><td>ns</td></tr><tr><td>networkpolicies</td><td></td></tr><tr><td>nodes</td><td>no</td></tr><tr><td>statefulsets</td><td></td></tr><tr><td>persistentvolumeclaims</td><td>pvc</td></tr><tr><td>persistentvolumes</td><td>pv</td></tr><tr><td>pods</td><td>po</td></tr><tr><td>podsecuritypolicies</td><td>psp</td></tr><tr><td>podtemplates</td><td></td></tr><tr><td>replicasets</td><td>rs</td></tr><tr><td>replicationcontrollers</td><td>rc</td></tr><tr><td>resourcequotas</td><td>quota</td></tr><tr><td>cronjob</td><td></td></tr><tr><td>secrets</td><td></td></tr><tr><td>serviceaccount</td><td>sa</td></tr><tr><td>services</td><td>svc</td></tr><tr><td>storageclasses</td><td></td></tr></tbody></table><h2 id="kubectl-get-显示资源列表"><a href="#kubectl-get-显示资源列表" class="headerlink" title="kubectl get - 显示资源列表"></a>kubectl get - 显示资源列表</h2><p>#获取类型为Deployment的资源列表 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployments</span><br></pre></td></tr></table></figure><p>#获取类型为Pod的资源列表 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><p>#获取类型为Node的资源列表 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><h2 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h2><p>在命令后增加 -A 或 –all-namespaces 可查看所有名称空间中的对象，使用参数 -n 可查看指定名称空间的对象，例如</p><p># 查看所有名称空间的 Deployment </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployments -A </span><br><span class="line">kubectl get deployments --all-namespaces</span><br></pre></td></tr></table></figure><p>查看 kube-system 名称空间的 Deployment </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployments -n kube-system</span><br></pre></td></tr></table></figure><p>检查 kubectl 是否知道集群地址及凭证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl config view</span><br></pre></td></tr></table></figure><p>通过 kubectl cluster-info 命令获得这些服务列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ebs ~]# kubectl cluster-info </span><br><span class="line"></span><br><span class="line">Kubernetes master is running at https:&#x2F;&#x2F;172.16.121.88:6443 KubeDNS is running at https:&#x2F;&#x2F;172.16.121.88:6443&#x2F;api&#x2F;v1&#x2F;namespaces&#x2F;kube-system&#x2F;services&#x2F;kube-dns:dns&#x2F;proxy </span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use &#39;kubectl cluster-info dump&#39;.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些基本的kubernets操作命令&lt;/p&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://yoursite.com/categories/kubernetes/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo 使用</title>
    <link href="http://yoursite.com/2020/03/19/hexo%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/03/19/hexo%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-19T09:18:36.000Z</published>
    <updated>2020-03-23T07:14:57.409Z</updated>
    
    <content type="html"><![CDATA[<p>hexo 搭建、部署、操作；</p> <a id="more"></a> <p>_config.yml配置git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">  type: &#39;git&#39;  </span><br><span class="line">  repo: git@github.com:yourname&#x2F;yourname.github.io.git  </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h5 id="上传github，推送文件步骤："><a href="#上传github，推送文件步骤：" class="headerlink" title="上传github，推送文件步骤："></a>上传github，推送文件步骤：</h5><p>hexo clean      hexo c   清除缓存文件 (db.json) 和已生成的静态文件 (public) </p><p>hexo generate   hexo g   生成静态文件 </p><p>hexo deploy     hexo d   部署网站 </p><p>执行端口启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -i 0.0.0.0 -p 8080</span><br></pre></td></tr></table></figure><p>绑定个人域名：</p><p>解析域名注意，博客网址中必须使用你github的用户名.</p><p><strong>布局（Layout）</strong></p><p>Hexo 有三种默认布局：post、page 和 draft。在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td>post</td><td>source/_posts</td></tr><tr><td>page</td><td>source</td></tr><tr><td>draft</td><td>source/_drafts</td></tr></tbody></table><p><strong>hexo init</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init [ folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><p><strong>hexo new</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><p>hexo new “post title with whitespace” </p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-p, –path</td><td>自定义新文章的路径</td></tr><tr><td>-r, –replace</td><td>如果存在同名文章，将其替换</td></tr><tr><td>-s, –slug</td><td>文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。你可以使用 –path 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about&#x2F;me &quot;About me&quot;</span><br></pre></td></tr></table></figure><p>以上命令会创建一个 source/about/me.md 文件，同时 Front Matter 中的 title 为 “About me”</p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about&#x2F;me</span><br></pre></td></tr></table></figure><p>此时 Hexo 会创建 source/_posts/about/me.md，同时 me.md 的 Front Matter 中的 title 为 “page”。这是因为在上述命令中，hexo-cli 将 page 视为指定文章的标题、并采用默认的 layout。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo 搭建、部署、操作；&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
</feed>
